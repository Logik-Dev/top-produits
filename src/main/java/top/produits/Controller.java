/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package top.produits;

import java.sql.SQLException;
import java.util.List;
import jbdc.RequetesDB;
import jbdc.Session;
import model.Additif;
import model.Produit;

public class Controller {

	private Session session = new Session();
	private final String ERREUR_LIST = "Impossible d'obtenir la liste de produits.";

	public void sauvegarderAdditif(Additif additif) {

		try {
			RequetesDB.sauvegarderAdditif(session.getConnection(), additif);
		}

		catch (SQLException e) {
			System.out.println("Impossible de sauvegarder l'additif.");
		}
	}

	public void sauvegarderListeAdditif(List<Additif> additifs) {

		try {
			for (Additif additif : additifs) {
				sauvegarderAdditif(additif);

			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Impossible de sauvegarder la liste d'additifs.");
		}

	}

	public void sauvegarderProduit(Produit produit) {

		try {
			RequetesDB.sauvegarderProduit(session.getConnection(), produit);
		}

		catch (SQLException e) {
			e.printStackTrace();
			System.out.println("Impossible de sauvegarder le produit.");
		}

		try {
			if (produit.getAdditifs().size() > 0) {
				for (String additif : produit.getAdditifs()) {
					RequetesDB.sauvegarderAdditifsProduit(session.getConnection(), additif, produit.getId());
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println("Impossible de sauvegarder les additifs du produits");
		}

	}

	public void sauvegarderListeProduits(List<Produit> produits) {

		try {
			for (Produit produit : produits) {
				sauvegarderProduit(produit);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Impossible de sauvegarder la liste de produits.");
		}

	}

	public List<Produit> obtenirListeDeToutLesProduits() {
		List<Produit> produits = null;

		try {
			produits = RequetesDB.obtenirListeDesProduits(session.getConnection());
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println(ERREUR_LIST);
		}
		return produits;
	}

	public List<Produit> obtenirListeLimiteeDeProduits(int nombre) {
		List<Produit> produits = null;

		try {
			produits = RequetesDB.rechercherProduitsParNombreDefini(session.getConnection(), nombre);
		}

		catch (SQLException e) {
			e.printStackTrace();
			System.out.println(ERREUR_LIST);
		}

		return produits;

	}

	public List<Produit> obtenirListeProduitsParNutriscore(char nutriscore) {
		List<Produit> produits = null;

		try {
			produits = RequetesDB.rechercherProduitsParNutriscore(session.getConnection(), nutriscore);
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println(ERREUR_LIST);
		}
		return produits;
	}

	public List<Produit> obtenirListeProduitsParNom(String nom) {
		List<Produit> produits = null;

		try {
			produits = RequetesDB.rechercherProduitsParNom(session.getConnection(), nom);
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println(ERREUR_LIST);
		}

		return produits;

	}

	public List<Produit> obtenirListeProduitsParAdditif(String codeAdditif) {
		List<Produit> produits = null;

		try {
			produits = RequetesDB.rechercherProduitsParAdditif(session.getConnection(), codeAdditif);
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println(ERREUR_LIST);
		}

		return produits;

	}

	public Produit obtenirProduitParNom(String nom) {
		Produit produit = null;

		try {
			produit = RequetesDB.selectionnerProduitParNom(session.getConnection(), nom);
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println("Impossible d'obtenir le produit.");
		}

		return produit;
	}

	public void modifierProduit(Produit produit) {

		try {
			RequetesDB.modifierProduit(session.getConnection(), produit);
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println("Impossible de modifier le produit.");
		}

	}

	public void supprimerProduit(Produit produit) {

		try {
			RequetesDB.supprimerProduit(session.getConnection(), produit);
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println("Impossible de supprimer le produit.");
		}
	}

	/*
	 * public static void main(String[] args) throws MalformedURLException,
	 * IOException, SQLException {
	 * 
	 * App test = new App(); // test.recupererAdditifs(); //
	 * test.sauvegarderAdditifs(); // test.recupererTopProduitsAPI(); //
	 * test.sauvegarderProduits(); // test.afficheProduitParNutriscore('e'); //
	 * test.afficheProduitParNom("aux"); // test.afficheProduitParAdditif("E579");
	 * // test.afficheNombreDefiniDeProduit(1); //
	 * test.supprimerProduitParNom("compote pomme vanille"); // Produit produit =
	 * test.selectionnerProduitParNom("confiture extra fraises"); //
	 * produit.setMarque("Nutella"); // test.modifierProduit(produit);
	 * test.recupererProduitsParNomAPI("kinder"); test.afficherProduitsParNomJson();
	 * 
	 * }
	 */
}
